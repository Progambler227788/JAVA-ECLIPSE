
public class Stack {
    private char[] items;
    private int top;
    private final int MAX;

    public CustomStack(int capacity) {
        MAX = capacity;
        items = new char[MAX];
        top = -1;
    }

    public boolean full() {
        return top == MAX - 1;
    }

    public boolean empty() {
        return top == -1;
    }

    public void push(char newitem) {
        if (full()) {
            System.out.println("STACK IS FULL");
            return;
        }
        items[++top] = newitem;
    }

    public char pop() {
        if (empty()) {
            System.out.println("STACK EMPTY");
            return (char) 0; // Return a default value for char, can be adjusted based on requirements
        }
        return items[top--];
    }

    public void print() {
        System.out.print("Stack: ");
        for (int i = 0; i <= top; i++) {
            System.out.print(items[i] + " ");
        }
        System.out.println();
    }

    public char peek() {
        if (!empty())
            return items[top];
        return (char) 0; // Return a default value for char, can be adjusted based on requirements
    }

    public static void main(String[] args) {
        CustomStack stack = new CustomStack(5);
        stack.push('A');
        stack.push('B');
        stack.push('C');
        stack.print(); // Output: Stack: A B C
        System.out.println("Top element: " + stack.peek()); // Output: Top element: C
        stack.pop();
        stack.print(); // Output: Stack: A B
    }
}

